#include <iostream>
#include <iomanip>
#include <ctime>
#include <cstdlib> // For rand and srand

using namespace std;

// Tamaño de la muestra
const int K_SAMPLE_SIZE = 5;
const int n = 1000;  // Define the size of the array for rectaSSE

// Función que calcula la regresión lineal en C
void rectaC(int x[], int y[]) {
    double avgX = 0.0, avgY = 0.0, varX = 0.0, covXY = 0.0;

    // Calculamos la media de X e Y
    for (int i = 0; i < K_SAMPLE_SIZE; i++) {
        avgX += x[i];
        avgY += y[i];
    }
    avgX /= K_SAMPLE_SIZE;
    avgY /= K_SAMPLE_SIZE;

    // Calculamos la varianza de X y la covarianza entre X e Y
    for (int i = 0; i < K_SAMPLE_SIZE; i++) {
        varX += (x[i] - avgX) * (x[i] - avgX);
        covXY += (x[i] - avgX) * (y[i] - avgY);
    }

    varX /= (K_SAMPLE_SIZE - 1);
    covXY /= (K_SAMPLE_SIZE - 1);

    // Cálculo de la pendiente y la ordenada en el origen
    double m = covXY / varX;
    double b = avgY - (m * avgX);

    cout << "Ecuacion de la recta (C): y = " << m << "x + " << b << endl;
}

// Función SSE para la ejecución en ensamblador
double rectaSSE() {
    int* coordX = new int[n];
    int* coordY = new int[n];

    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        coordX[i] = i;
        coordY[i] = 2 * i + 3;
        //coordX[i] = rand() % 10;
        //coordY[i] = rand() % 10;
    }

    int sumX = 0, sumY = 0, sumXCuadrado = 0, sumXY = 0;
    float auxiliar, mediaX, mediaY, varianzaX, covarianzaXY, m, b;
    auxiliar = mediaX = mediaY = varianzaX = covarianzaXY = m = b = 0.0;

    int ultimaIter = n / 4;
    clock_t inicio = clock();

    __asm {
        mov ebx, 0;
        mov edx, 0;
        mov ecx, 0;
        mov eax, 0;
        mov esi, coordX;
        mov edi, coordY;

    bucle:
        cmp ecx, ultimaIter;
        jae terminar;

        // Registro sumX
        movdqu xmm0, [esi];
        paddd xmm2, xmm0;

        // Registro sumY
        movdqu xmm1, [edi];
        paddd xmm3, xmm1;

        // Registro sumXCuadrado
        pmulld xmm0, xmm0;
        paddd xmm4, xmm0;

        movdqu xmm0, [esi]; // Reiniciar
        // Registro sumXY
        pmulld xmm1, xmm0;
        paddd xmm5, xmm1;

        add esi, 16;
        add edi, 16;

        inc ecx;
        jmp bucle;

    terminar:
        // sumatorioX
        phaddd xmm2, xmm2;
        phaddd xmm2, xmm2;
        movdqu sumX, xmm2;
        mov ebx, sumX;

        // sumatorioY
        phaddd xmm3, xmm3;
        phaddd xmm3, xmm3;
        movdqu sumY, xmm3;
        mov edx, sumY;

        // SumatorioXCuadrado
        phaddd xmm4, xmm4;
        phaddd xmm4, xmm4;
        movdqu sumXCuadrado, xmm4;
        mov eax, sumXCuadrado;

        // SumatorioXY
        phaddd xmm5, xmm5;
        phaddd xmm5, xmm5;
        movdqu sumXY, xmm5;
        mov ecx, sumXY;

        mov sumX, ebx;
        mov sumY, edx;
        mov sumXCuadrado, eax;
        mov sumXY, ecx;

        // Coloca un numero entero (que pasa a float) en el tope de la pila
        fild sumX;
        // Divide STO (tope pila) pasando a float entre 'n'
        fidiv n;
        // Mueve el contenido de STO a una posición de memoria
        fstp mediaX;

        fild sumY;
        fidiv n;
        fstp mediaY;

        // VARIANZA = (sumXCuadrado / n) - (mediaX * mediaX)
        fild sumXCuadrado;
        fidiv n;
        fstp varianzaX;

        // auxiliar = (mediaX * mediaX)
        fld mediaX;
        fmul mediaX;
        fstp auxiliar;

        fld varianzaX;
        fsub auxiliar;
        fstp varianzaX;

        // COVARIANZA = (sumXY / n) - (mediaX * mediaY)
        fild sumXY;
        fidiv n;
        fstp covarianzaXY;

        // auxiliar = (mediaX * mediaY)
        fld mediaX;
        fmul mediaY;
        fstp auxiliar;

        fld covarianzaXY;
        fsub auxiliar;
        fstp covarianzaXY;

        // m = covarianzaXY / varianzaX
        fld covarianzaXY;
        fdiv varianzaX;
        fstp m;

        // b = ((covarianzaXY / varianzaX) * (-mediaX)) + mediaY
        fld b;
        fsub mediaX;
        fmul covarianzaXY;
        fdiv varianzaX;
        fadd mediaY;
        fstp b;
    }
    cout << "Ecuacion de la recta (ASM optimizado): y = " << m << "x + " << b << endl;

    clock_t fin = clock();
    delete[] coordX;
    delete[] coordY;
    return (double(fin - inicio) / ((clock_t)1000));
}

// Función para inicializar datos de prueba
void generarDatos(int* x, int* y, int n) {
    for (int i = 0; i < n; i++) {
        x[i] = i;               // Valores predecibles para x
        y[i] = 2 * i + 3;       // Simula una relación lineal (y = 2x + 3)
    }
}

// Función genérica para medir el tiempo de ejecución de una función
double medirTiempo(double (*func)(), int iteraciones) {
    auto inicio = clock();
    for (int i = 0; i < iteraciones; i++) {
        func();
    }
    return static_cast<double>(clock() - inicio) / CLOCKS_PER_SEC;
}

// Nueva función que ejecuta la regresión en ensamblador
void rectaEnsamblador(int x[], int y[]) {
    float sumX = 0, sumY = 0, sumXCuadrado = 0, sumXY = 0;
    float mediaX, mediaY, varianzaX, covarianzaXY, m, b;

    __asm {
        xor esi, esi; Inicializar índice
        xor eax, eax
        xor ebx, ebx
        xor edx, edx

        ; Bucle para calcular sumatorias
        bucle :
        cmp esi, K_SAMPLE_SIZE
            jge terminar

            mov eax, [x + esi * 4]; x[i]
            mov ebx, [y + esi * 4]; y[i]

            add sumX, eax; sumX += x[i]
            add sumY, ebx; sumY += y[i]

            imul eax, eax
            add sumXCuadrado, eax; sumXCuadrado += x[i] ^ 2

            mov eax, [x + esi * 4]
            imul eax, ebx
            add sumXY, eax; sumXY += x[i] * y[i]

            inc esi
            jmp bucle

            terminar :

        ; Calcular mediaX = sumX / K_SAMPLE_SIZE
            fild sumX
            fild K_SAMPLE_SIZE
            fdiv
            fstp mediaX

            ; Calcular mediaY = sumY / K_SAMPLE_SIZE
            fild sumY
            fild K_SAMPLE_SIZE
            fdiv
            fstp mediaY

            ; Calcular varianzaX = (sumXCuadrado / K_SAMPLE_SIZE) - (mediaX * mediaX)
            fild sumXCuadrado
            fild K_SAMPLE_SIZE
            fdiv
            fld mediaX
            fmul mediaX
            fsub
            fstp varianzaX

            ; Calcular covarianzaXY = (sumXY / K_SAMPLE_SIZE) - (mediaX * mediaY)
            fild sumXY
            fild K_SAMPLE_SIZE
            fdiv
            fld mediaX
            fmul mediaY
            fsub
            fstp covarianzaXY

            ; Calcular pendiente m = covarianzaXY / varianzaX
            fld covarianzaXY
            fld varianzaX
            fdiv
            fstp m

            ; Calcular ordenada al origen b = mediaY - (m * mediaX)
            fld mediaX
            fmul m
            fld mediaY
            fsub
            fstp b
    }

    cout << "Ecuacion de la recta (ASM optimizado): y = " << m << "x + " << b << endl;
}

int main() {
    int x[K_SAMPLE_SIZE], y[K_SAMPLE_SIZE];

    generarDatos(x, y, K_SAMPLE_SIZE);

    // Medición de tiempos
    //double tiempo_Asm_5000 = medirTiempo(rectaSSE, 5000);
    //double tiempo_Asm_15000 = medirTiempo(rectaSSE, 15000);
    rectaSSE();

    // Mostrar resultados
    cout << fixed << setprecision(6);
    //cout << "Tiempo en Ensamblador (5000 iteraciones): " << tiempo_Asm_5000 << " segundos\n";
    //cout << "Tiempo en Ensamblador (15000 iteraciones): " << tiempo_Asm_15000 << " segundos\n";

    return 0;
}
